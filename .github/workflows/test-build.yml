name: Build, Test and Push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Cache app docker layers and image
        id: cached-image
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.head_ref }}-
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        if: steps.cached-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Build and cache image
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-image-cache

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -t user-office-scheduler-frontend:${{ github.sha }} -o type=docker,dest=- . > /tmp/.buildx-image-cache/img.tar

  cypress:
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Cache app docker layers and image
        id: cached-cypress-image
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: Cypress-${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            Cypress-${{ runner.os }}-buildx-${{ github.head_ref }}-
            Cypress-${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        if: steps.cached-cypress-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Build and cache image
        if: steps.cached-cypress-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-image-cache

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -t e2e-cypress:latest -f Dockerfile.e2e -o type=docker,dest=- . > /tmp/.buildx-image-cache/e2e-cypress.tar

  e2e:
    runs-on: ubuntu-latest
    needs: cypress

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Load app cache
        id: cached-image
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on app cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Load cypress cache
        id: cached-cypress-image
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: Cypress-${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on cypress cache miss
        if: steps.cached-cypress-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load cached cypress image
        run: |
          docker load --input /tmp/.buildx-image-cache/e2e-cypress.tar
          docker image ls -a

      - name: Resolve required repositories
        id: resolve_rep
        run: |
          # this assumes the result is an array, and .name property is used
          check_feature() {
            # first param is the branch, everything after is endpoint for curl
            local branch=$1
            local found=0

            shift

            for endpoint in $@; do
              local json=$(curl -s $endpoint)
              local branch_found=$(echo $json | jq -c ".[] | select(.name==\"$branch\") | .name")

              # to track what we found
              echo "$endpoint -> $branch_found" &> /dev/stderr

              if [[ $branch_found != "" ]]; then
                found=$((found += 1))
              fi
            done

            echo $found
          }

          # NOTE: This might not work because ghcr.io/v2 is replacing the dockerhub api but not really tested.
          # It might be that the url is: https://ghcr.io/v2/userofficeproject/user-office-backend/manifests/tags
          SCHEDULER_BE_TAGS=$(check_feature ${{ github.head_ref }} \
            https://ghcr.io/v2/userofficeproject/user-office-scheduler-backend/tags/list \
            https://api.github.com/repos/UserOfficeProject/user-office-scheduler-backend/branches
          )

          UO_BE_TAGS=$(check_feature ${{ github.head_ref }} \
            https://ghcr.io/v2/userofficeproject/user-office-backend/tags/list \
            https://api.github.com/repos/UserOfficeProject/user-office-core/branches
          )

          GATEWAY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://ghcr.io/v2/userofficeproject/user-office-gateway/tags/list \
            https://api.github.com/repos/UserOfficeProject/user-office-gateway/branches
          )

          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://ghcr.io/v2/userofficeproject/user-office-factory/tags/list \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches
          )

          SCHEDULER_BE_TAG=develop
          if [[ $SCHEDULER_BE_TAGS == "2" ]]; then
            SCHEDULER_BE_TAG="${{ github.head_ref }}"
          fi

          UO_BE_TAG=develop
          if [[ $UO_BE_TAGS == "2" ]]; then
            UO_BE_TAG="${{ github.head_ref }}"
          fi

          GATEWAY_TAG=develop
          if [[ $GATEWAY_TAGS == "2" ]]; then
            GATEWAY_TAG="${{ github.head_ref }}"
          fi

          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo "SCHEDULER_BE_TAG=${SCHEDULER_BE_TAG}" >> $GITHUB_OUTPUT
          echo "UO_BE_TAG=${UO_BE_TAG}" >> $GITHUB_OUTPUT
          echo "GATEWAY_TAG=${GATEWAY_TAG}" >> $GITHUB_OUTPUT
          echo "FACTORY_TAG=${FACTORY_TAG}" >> $GITHUB_OUTPUT

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}" https://github.com/UserOfficeProject/user-office-scheduler-backend.git
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.UO_BE_TAG }}" https://github.com/UserOfficeProject/user-office-core.git
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.GATEWAY_TAG }}" https://github.com/UserOfficeProject/user-office-gateway.git
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          EOF

      - name: Run docker-compose
        env:
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ steps.resolve_rep.outputs.UO_BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-core/apps/user-office-backend
          export USER_OFFICE_BACKEND=http://backend:4000/graphql
          export USER_OFFICE_ENDPOINT=$USER_OFFICE_BACKEND

          export USER_OFFICE_SCHEDULER_BACKEND_TAG=${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}
          export USER_OFFICE_SCHEDULER_BACKEND_DIR=user-office-scheduler-backend
          export USER_OFFICE_SCHEDULER_BACKEND=http://scheduler-backend:4000/graphql

          export USER_OFFICE_SCHEDULER_FRONTEND_DIR=$REPO_DIR_NAME

          export USER_OFFICE_GATEWAY_TAG=${{ steps.resolve_rep.outputs.GATEWAY_TAG }}

          export USER_OFFICE_FACTORY_TAG=${{ steps.resolve_rep.outputs.FACTORY_TAG }}
          export USER_OFFICE_FACTORY_ENDPOINT=noop

          export BUILD_TAG=${{ github.sha }}

          docker-compose -f docker-compose.all.yml \
            -f user-office-scheduler-backend/docker-compose.e2e.yml \
            -f user-office-gateway/docker-compose.e2e.yml \
            -f "$REPO_DIR_NAME/docker-compose.e2e.yml" \
            up --exit-code-from cypress

      - name: Upload cypres screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: e2e
    # Don't push the built image if dependabot is creating the PR
    if: github.actor != 'dependabot[bot]'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Load app cache
        id: cached-image
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Login to GitHub Container Registry
        # Don't login if dependabot is creating the PR
        if: ${{ !startsWith(github.head_ref, 'dependabot') }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push
        # Don't push the image if dependabot is creating the PR
        if: ${{ !startsWith(github.head_ref, 'dependabot') }}
        run: |
          docker tag user-office-scheduler-frontend:${{ github.sha }} ghcr.io/userofficeproject/user-office-scheduler-frontend:${{ github.head_ref }}
          docker push ghcr.io/userofficeproject/user-office-scheduler-frontend:${{ github.head_ref }}
