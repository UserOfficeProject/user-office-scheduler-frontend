# This is a basic workflow to help you get started with Actions

name: Test && Build && Push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # build:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #     - name: Build
  #       run: |
  #         buildx build --cache-from="type=local,src=/tmp/.buildx-cache" --cache-to="type=local,dest=/tmp/.buildx-cache"
  e2e:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}
      - name: Build
        run: |
          ls -la /tmp

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -o type=docker,dest=- . > /tmp/.buildx-image-cache/img.tar

          ls -la /tmp/.buildx-layer-cache
          ls -la /tmp/.buildx-image-cache
  #     - name: Resolve required repositories
  #       id: resolve_rep
  #       run: |
  #         SCHEDULER_BE_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-scheduler-backend/tags)
  #         UO_BE_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-backend/tags)
  #         GATEWAY_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-gateway/tags)
  #         SCHEDULER_BE_TAG=develop
  #         if [[ $(echo $SCHEDULER_BE_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
  #           SCHEDULER_BE_TAG="${{ github.head_ref }}"
  #         fi
  #         UO_BE_TAG=develop
  #         if [[ $(echo $UO_BE_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
  #           UO_BE_TAG="${{ github.head_ref }}"
  #         fi
  #         GATEWAY_TAG=develop
  #         if [[ $(echo $GATEWAY_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
  #           GATEWAY_TAG="${{ github.head_ref }}"
  #         fi
  #         echo ::set-output name=SCHEDULER_BE_TAG::${SCHEDULER_BE_TAG}
  #         echo ::set-output name=UO_BE_TAG::${UO_BE_TAG}
  #         echo ::set-output name=GATEWAY_TAG::${GATEWAY_TAG}
  #     - name: Download required repositories
  #       run: |
  #         cd "$GITHUB_WORKSPACE/.."
  #         git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}" https://github.com/UserOfficeProject/user-office-scheduler-backend.git
  #         git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.UO_BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git
  #         git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.GATEWAY_TAG }}" https://github.com/UserOfficeProject/user-office-gateway.git
  #     - name: Setup base docker-compose
  #       run: |
  #         cd "$GITHUB_WORKSPACE/.."
  #         cat > docker-compose.all.yml << EOF
  #         version: "3.1"
  #         EOF
  #     - name: Run docker-compose
  #       run: |
  #         cd "$GITHUB_WORKSPACE/.."
  #         REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)
  #         export USER_OFFICE_BACKEND_TAG=${{ steps.resolve_rep.outputs.UO_BE_TAG }}
  #         export USER_OFFICE_BACKEND_DIR=user-office-backend
  #         export USER_OFFICE_SCHEDULER_BACKEND_TAG=${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}
  #         export USER_OFFICE_SCHEDULER_BACKEND_DIR=user-office-scheduler-backend
  #         export USER_OFFICE_GATEWAY_TAG=${{ steps.resolve_rep.outputs.GATEWAY_TAG }}
  #         export USER_OFFICE_BACKEND=http://backend:4000/graphql
  #         export USER_OFFICE_SCHEDULER_BACKEND=http://scheduler-backend:4000/graphql
  #         export USER_OFFICE_SCHEDULER_FRONTEND_DIR=$REPO_DIR_NAME
  #         export RABBITMQ_HOSTNAME=rabbitmq
  #         export INCLUDE_SEEDS=1
  #         export USER_OFFICE_ENDPOINT=http://backend:4000/graphql
  #         export BUILD_TAG=${{ github.sha }}
  #         docker-compose -f docker-compose.all.yml \
  #           -f user-office-scheduler-backend/docker-compose.e2e.yml \
  #           -f user-office-backend/docker-compose.e2e.yml \
  #           -f user-office-gateway/docker-compose.e2e.yml \
  #           -f "$REPO_DIR_NAME/docker-compose.e2e.yml" \
  #           up --force-recreate --build --exit-code-from cypress
  # push:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   needs: e2e
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Cache Docker layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     # For debugging capture the selected branch
  #     - name: Branch
  #       run: echo "Branch ${{ github.head_ref }}"
  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         #build-args: REACT_APP_AUTH_REDIRECT=/shared-auth
  #         push: true
  #         tags: dmsc/duo-scheduler-frontend:${{ github.head_ref }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
