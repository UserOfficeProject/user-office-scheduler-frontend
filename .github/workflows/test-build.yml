# This is a basic workflow to help you get started with Actions

name: Build, Test and Push

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache app docker layers and image
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.head_ref }}-
            ${{ runner.os }}-buildx-

      - name: Build and cache image
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-image-cache

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -t duo-scheduler-frontend:${{ github.sha }} -o type=docker,dest=- . > /tmp/.buildx-image-cache/img.tar

  cypress:
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Load cypress cache
        id: cached-cypress-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('cypress/Dockerfile') }}

      - name: Build and cache cypress image
        if: steps.cached-cypress-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-cypress

          docker build ./cypress --squash -t e2e-cypress:latest
          docker save e2e-cypress:latest > /tmp/.buildx-cypress/img.tar

  e2e:
    runs-on: ubuntu-latest
    needs: cypress

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Load cypress cache
        id: cached-cypress-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('cypress/Dockerfile') }}

      - name: Fail on cypress cache miss
        if: steps.cached-cypress-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Load cached cypress image
        run: |
          docker load --input /tmp/.buildx-cypress/img.tar

      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on app cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Resolve required repositories
        id: resolve_rep
        run: |
          SCHEDULER_BE_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-scheduler-backend/tags)
          UO_BE_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-backend/tags)
          GATEWAY_TAGS_JSON=$(curl -sb -H https://registry.hub.docker.com/v1/repositories/dmsc/duo-gateway/tags)
          SCHEDULER_BE_TAG=develop
          if [[ $(echo $SCHEDULER_BE_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
            SCHEDULER_BE_TAG="${{ github.head_ref }}"
          fi
          UO_BE_TAG=develop
          if [[ $(echo $UO_BE_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
            UO_BE_TAG="${{ github.head_ref }}"
          fi
          GATEWAY_TAG=develop
          if [[ $(echo $GATEWAY_TAGS_JSON | jq -c '.[] | select(.name=="${{ github.head_ref }}")' | jq -s '. | length') != "0" ]]; then
            GATEWAY_TAG="${{ github.head_ref }}"
          fi
          echo ::set-output name=SCHEDULER_BE_TAG::${SCHEDULER_BE_TAG}
          echo ::set-output name=UO_BE_TAG::${UO_BE_TAG}
          echo ::set-output name=GATEWAY_TAG::${GATEWAY_TAG}

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}" https://github.com/UserOfficeProject/user-office-scheduler-backend.git
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.UO_BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git
          git clone --depth 1 --branch "${{ steps.resolve_rep.outputs.GATEWAY_TAG }}" https://github.com/UserOfficeProject/user-office-gateway.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          EOF

      - name: Run docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ steps.resolve_rep.outputs.UO_BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend
          export USER_OFFICE_SCHEDULER_BACKEND_TAG=${{ steps.resolve_rep.outputs.SCHEDULER_BE_TAG }}
          export USER_OFFICE_SCHEDULER_BACKEND_DIR=user-office-scheduler-backend
          export USER_OFFICE_GATEWAY_TAG=${{ steps.resolve_rep.outputs.GATEWAY_TAG }}
          export USER_OFFICE_BACKEND=http://backend:4000/graphql
          export USER_OFFICE_SCHEDULER_BACKEND=http://scheduler-backend:4000/graphql
          export USER_OFFICE_SCHEDULER_FRONTEND_DIR=$REPO_DIR_NAME
          export RABBITMQ_HOSTNAME=rabbitmq
          export INCLUDE_SEEDS=1
          export USER_OFFICE_ENDPOINT=http://backend:4000/graphql
          export BUILD_TAG=${{ github.sha }}

          docker-compose -f docker-compose.all.yml \
            -f user-office-scheduler-backend/docker-compose.e2e.yml \
            -f user-office-backend/docker-compose.e2e.yml \
            -f user-office-gateway/docker-compose.e2e.yml \
            -f "$REPO_DIR_NAME/docker-compose.e2e.yml" \
            up --exit-code-from cypress
  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: e2e
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}

      - name: Fail on cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push
        run: |
          docker tag duo-scheduler-frontend:${{ github.sha }} dmsc/duo-scheduler-frontend:${{ github.head_ref }}
          docker push dmsc/duo-scheduler-frontend:${{ github.head_ref }}
